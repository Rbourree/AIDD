generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TenantRole {
  OWNER
  ADMIN
  MEMBER
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  password      String
  firstName     String?
  lastName      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  tenantUsers   TenantUser[]
  invitations   Invitation[]
  refreshTokens RefreshToken[]

  @@map("users")
}

model Tenant {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenantUsers TenantUser[]
  invitations Invitation[]
  items       Item[]

  @@map("tenants")
}

model TenantUser {
  id        String     @id @default(uuid())
  role      TenantRole @default(MEMBER)
  userId    String
  tenantId  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant    Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantId])
  @@map("tenant_users")
}

model Invitation {
  id        String     @id @default(uuid())
  email     String
  token     String     @unique
  role      TenantRole @default(MEMBER)
  expiresAt DateTime
  accepted  Boolean    @default(false)
  tenantId  String
  invitedBy String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  tenant    Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  inviter   User       @relation(fields: [invitedBy], references: [id])

  @@map("invitations")
}

model Item {
  id          String   @id @default(uuid())
  name        String
  description String?
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("items")
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@map("refresh_tokens")
}